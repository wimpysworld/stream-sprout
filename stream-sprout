#!/usr/bin/env bash
# shellcheck disable=SC2154

readonly STREAM_SPROUT_YAML="stream-sprout.yaml"
readonly VERSION="0.1.4"

function ctrl_c() {
    echo " - Trapped: CTRL-C"
    pkill ffmpeg
    rename_archive
    exit
}

# https://stackoverflow.com/questions/5014632/how-can-i-parse-a-yaml-file-from-a-linux-shell-script
function parse_yaml() {
   local prefix="${2}"
   local s=""
   local w=""
   local fs=""
   s='[[:space:]]*'
   w='[a-zA-Z0-9_]*'
   fs=$'\034'
   sed -ne "s|^\(${s}\):|\1|" \
        -e "s|^\(${s}\)\(${w}\)${s}:${s}[\"']\(.*\)[\"']$s\$|\1${fs}\2${fs}\3|p" \
        -e "s|^\(${s}\)\(${w}\)${s}:${s}\(.*\)${s}\$|\1${fs}\2${fs}\3|p" "${1}" |
   awk -F"${fs}" '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         gsub(/^[ \t]+/, "", $3); gsub(/[ \t]+$/, "", $3);
         gsub(/\s*#.*$/, "", $3);
         printf("%s%s%s=\"%s\"\n", "'"${prefix}"'",vn, $2, $3);
      }
   }'
}

function rename_archive() {
    local STAMP=""
    # If there is a stream file, then rename it to the current date and time
    if [ -e "${sprout_server_archive_path}/${sprout_server_archive_temp}" ]; then
        STAMP=$(date +%Y%m%d_%H%M%S)
        echo " - Rename:  ${sprout_server_archive_path}/${sprout_server_archive_temp} to ${sprout_server_archive_path}/stream-sprout-${STAMP}.mkv"
        mv "${sprout_server_archive_path}/${sprout_server_archive_temp}" "${sprout_server_archive_path}/stream-sprout-${STAMP}.mkv"
    fi
}

function add_archive() {
    sprout_server_archive_temp="stream-temp-$(date +%s%N).mkv"
    # Check if recording is enabled in the YAML configuration
    if [[ "${sprout_server_archive_stream,,}" == "true" || "${sprout_server_archive_stream}" == "1" ]]; then
        if [ -z "${sprout_server_archive_path}" ]; then
            sprout_server_archive_path="$(dirname "${PWD}")"
        else
            mkdir -p "${sprout_server_archive_path}" 2> /dev/null
        fi
        echo " - Archive: ${sprout_server_archive_path}/${sprout_server_archive_temp}"
        if [ -n "${STREAM_TEE}" ]; then
            STREAM_TEE+="|"
        fi
        STREAM_TEE+="[f=matroska]${sprout_server_archive_path}/${sprout_server_archive_temp}"
    fi
}

function add_service() {
    local URI="${1}"
    if [ -n "${URI}" ]; then
        if [ -n "${STREAM_TEE}" ]; then
            STREAM_TEE+="|"
        fi
        # Using the onfail option will allow the other streams to continue if one fails.
        STREAM_TEE+="[f=flv:onfail=ignore]${URI}"
    fi
}

function get_stream_tee() {
    local SERVICE=""
    local URI=""
    local URI_ENV=""
    local KEY_ENV=""
    parse_yaml "${STREAM_SPROUT_YAML}" sprout_ | grep '^sprout_services_.*_enabled=' | while read -r SERVICES; do
        SERVICE=$(echo "${SERVICES}" | cut -d'_' -f3)
        ENABLED=$(echo "${SERVICES}" | cut -d'=' -f2 | tr -d \'\" )
        if [[ "${ENABLED,,}" == "true" || "${ENABLED}" == "1" ]]; then
            echo " - Service: ${SERVICE}"
            # Construct the variable name
            URI_ENV="sprout_services_${SERVICE}_rtmp_server"
            KEY_ENV="sprout_services_${SERVICE}_key"
            # Use indirect expansion to get the value
            URI="${!URI_ENV}${!KEY_ENV}"
            if [[ ! "${URI}" =~ ^rtmp://.* ]]; then
                echo " - Invalid URL:  ${SERVICE} is not a valid RTMP URL"
                return
            fi
            add_service "${URI}"
        fi
    done
    add_archive
}

# Check that ffmpeg and pkill are available on the PATH
for CMD in ffmpeg pkill; do
    if ! command -v "${CMD}" &> /dev/null; then
        echo "ERROR! ${CMD} is not installed. Exiting."
        exit 1
    fi
done

# Check in the current working directory
if [ -f "./${STREAM_SPROUT_YAML}" ]; then
    STREAM_SPROUT_CONFIG="./${STREAM_SPROUT_YAML}"
# Check in the user's home directory, considering XDG on Linux and compatibility with macOS
elif [ -f "${XDG_CONFIG_HOME:-${HOME}/.config}/${STREAM_SPROUT_YAML}" ]; then
    STREAM_SPROUT_CONFIG="${XDG_CONFIG_HOME:-${HOME}/.config}/${STREAM_SPROUT_YAML}"
# Check in /etc
elif [ -f "/etc/${STREAM_SPROUT_YAML}" ]; then
    STREAM_SPROUT_CONFIG="/etc/${STREAM_SPROUT_YAML}"
else
    echo "ERROR: ${STREAM_SPROUT_YAML} was not found."
    exit 1
fi

eval "$(parse_yaml "${STREAM_SPROUT_YAML}" sprout_)"

# trap ctrl-c and call ctrl_c() to clean up
trap ctrl_c INT

while true; do
    echo "Stream Sprout v${VERSION} using ${STREAM_SPROUT_CONFIG}"
    if [[ ! "${sprout_server_url}" =~ ^rtmp://.* ]]; then
        echo " - Invalid URL:  ${sprout_server_url} is not a valid RTMP URL."
        exit 1
    fi
    echo -n " - Server:  ${sprout_server_url}"
    if [ -n "${sprout_server_key}" ]; then
        sprout_server_url+="/${sprout_server_key}"
        echo " (key required)"
    else
        echo ""
    fi
    STREAM_TEE=""
    get_stream_tee
    FFMPEG_LOG=$(mktemp /tmp/ffmpeg.XXXXXX.log)
    ffmpeg \
        -hide_banner \
        -flags +global_header \
        -fflags nobuffer \
        -listen 1 -i "${sprout_server_url}?rtmp_buffer=0&rtmp_live=live" \
        -flvflags no_duration_filesize \
        -c:v copy -c:a copy -map 0 \
        -movflags +faststart \
        -f tee -use_fifo 1 "${STREAM_TEE}" >"${FFMPEG_LOG}" 2>&1 &

    # Capture the PID of the ffmpeg process
    FFMPEG_PID=$!

    echo -e " \U2B07  FFmpeg process (${FFMPEG_PID}) logging to ${FFMPEG_LOG}"

    COUNTER=0
    # 0 for standing-by
    # 1 for streaming
    STREAMING_STATUS=0

    # Monitor the FFmpeg process
    while sleep 1; do
        STAMP="[$(date +%H:%M:%S)]"
        if ! ps -p "${FFMPEG_PID}" > /dev/null; then
            echo -e " \e[31m\U23F9\e[0m  FFmpeg process (${FFMPEG_PID}) has ended"
            break
        else
            if grep "Input #0, flv, from 'rtmp://" "${FFMPEG_LOG}" > /dev/null; then
                NEW_STATUS=1
            else
                NEW_STATUS=0
            fi

            # Check if status changed or if it's time to log the status again
            if [[ ${NEW_STATUS} -ne ${STREAMING_STATUS} ]] || (( COUNTER % 30 == 0 )); then
                if [[ ${NEW_STATUS} -eq 1 ]]; then
                    echo -e " \e[32m\U25B6\e[0m  FFmpeg process (${FFMPEG_PID}) is streaming   ${STAMP}"
                else
                    echo -e " \e[33m\U23F8\e[0m  FFmpeg process (${FFMPEG_PID}) is standing-by ${STAMP}"
                fi
                 # Update the current status
                STREAMING_STATUS=${NEW_STATUS}
            fi
            ((COUNTER++))
        fi
    done
    rename_archive
    echo
done
